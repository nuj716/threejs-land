---
// File: src/components/GltfViewer.astro
---

<div class="model-viewer">
  <div id="loading" class="loading">Loading model...</div>
  <canvas id="model-canvas"></canvas>
  
  <div class="controls">
    <div class="control-section">
      <h3>Environment</h3>
      <select id="environment-select">
        <option value="studio">Studio</option>
        <option value="sunset">Sunset</option>
        <option value="garden">Garden</option>
        <option value="city">City</option>
      </select>
      <label>
        Environment Intensity
        <input type="range" id="env-intensity" min="0" max="2" step="0.1" value="1">
      </label>
    </div>
    
    <div class="control-section">
      <h3>Material Controls</h3>
      <label>
        Metalness
        <input type="range" id="metalness" min="0" max="1" step="0.1" value="1">
      </label>
      <label>
        Roughness
        <input type="range" id="roughness" min="0" max="1" step="0.1" value="0.5">
      </label>
      <label>
        Material Color
        <input type="color" id="material-color" value="#ffffff">
      </label>
    </div>
  </div>
</div>

<style>
  .model-viewer {
    width: 100%;
    height: 100vh;
    position: relative;
  }

  .loading {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-family: Arial, sans-serif;
    display: none;
    z-index: 10;
  }

  #model-canvas {
    width: 100%;
    height: 100%;
  }

  .controls {
    position: fixed;
    top: 50%;
    right: 1rem;
    background: rgba(0, 0, 0, 0.7);
    padding: 1rem;
    border-radius: 8px;
    color: white;
    z-index: 100;
    width: 15%;
  }

  .control-section {
    margin-bottom: 1rem;
  }

  .control-section h3 {
    margin: 0 0 .5rem 0;
    font-size: 16px;
  }

  .control-section label {
    display: block;
    margin: .5rem 0;
    font-size: 14px;
  }

  input[type="range"] {
    width: 100%;
  }

  select {
    width: 100%;
    padding: .25rem;
    margin-bottom: 10px;
    background: #fff;
    border: none;
    border-radius: 4px;
  }
</style>

<script>
  import * as THREE from 'three';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
  import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';
  import gsap from 'gsap'
  import GUI from 'lil-gui';

  class ModelViewer {
    private scene: THREE.Scene;
    private camera: THREE.PerspectiveCamera;
    private renderer: THREE.WebGLRenderer;
    private controls: OrbitControls;
    private canvas: HTMLCanvasElement;
    private envMap: THREE.Texture | null = null;
    private model: THREE.Object3D | null = null;
    private materials: THREE.Material[] = [];

    constructor() {
      this.init();
      this.setupEventListeners();
      this.animate();
    }
    
    private async init(): Promise<void> {
      this.canvas = document.getElementById('model-canvas') as HTMLCanvasElement;

      // Scene setup
      this.scene = new THREE.Scene();
      this.scene.background = new THREE.Color(0x333333);

      // Camera setup
      this.camera = new THREE.PerspectiveCamera(
        75,
        this.canvas.clientWidth / this.canvas.clientHeight,
        0.1,
        1000
      );
      this.camera.position.z = 5;

      // Renderer setup
      this.renderer = new THREE.WebGLRenderer({
        canvas: this.canvas,
        antialias: true,
      });
      this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);
      this.renderer.setPixelRatio(window.devicePixelRatio);
      this.renderer.outputColorSpace = THREE.SRGBColorSpace;
      this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
      this.renderer.toneMappingExposure = 1;

      // Controls setup
      this.controls = new OrbitControls(this.camera, this.canvas);
      this.controls.enableDamping = true;
      this.controls.dampingFactor = 0.05;

      // Initial environment map
      await this.loadEnvironmentMap('studio');

      // Load GLTF model
      await this.loadModel();
      
      // debug ui
      const gui = new GUI(
          {
              width: 500,
              title: 'nice debug ui',
              closeFolders: false
          }
      )
      // close gui by default
      gui.close()
      // hide by default
      gui.hide()

      window.addEventListener('keydown', (event) => {
          if(event.key == 's')
              gui.show(gui._hidden)
      })

      const debugObject: any = {}

      // debug 
      // add folder
      const modelTweaks = gui.addFolder('awesome model')
      // close by default
      modelTweaks.close()

      // use folder name instead of gui to put all the debug to the folder
      modelTweaks 
          .add(this.model.position, 'y')
          .min(-3)
          .max(3)
          .step(0.01)
          .name('elevation')

      modelTweaks
          .add(this.model, 'visible')
      debugObject.spin = () => 
      {
          gsap.to(this.model.rotation, { y: this.model.rotation.y + Math.PI * 2 })
      }
      modelTweaks
          .add(debugObject, 'spin')

    }

    private async loadEnvironmentMap(type: string): Promise<void> {
      const loader = new RGBELoader();
      const loadingElement = document.getElementById('loading');
      if (loadingElement) loadingElement.style.display = 'block';

      try {
        const envMapPaths: { [key: string]: string } = {
          studio: '/threejs-land/envmaps/studio.hdr',
          sunset: '/threejs-land/envmaps/sunset.hdr',
          garden: '/threejs-land/envmaps/garden.hdr',
          city: '/threejs-land/envmaps/city.hdr'
        };

        const texture = await loader.loadAsync(envMapPaths[type]);
        texture.mapping = THREE.EquirectangularReflectionMapping;
        
        this.envMap = texture;
        this.scene.environment = texture;
        this.scene.background = texture;
        
        // Update materials
        this.updateMaterials();
      } catch (error) {
        console.error('Error loading environment map:', error);
      } finally {
        if (loadingElement) loadingElement.style.display = 'none';
      }
    }

    private async loadModel(): Promise<void> {
      const loader = new GLTFLoader();
      const loadingElement = document.getElementById('loading');
      if (loadingElement) loadingElement.style.display = 'block';

      try {
        const gltf = await loader.loadAsync('/threejs-land/models/ox_boy.glb');
        this.model = gltf.scene;
        
        // Collect all materials
        this.model.traverse((child) => {
          if (child instanceof THREE.Mesh) {
            const material = child.material;
            if (material && !this.materials.includes(material)) {
              this.materials.push(material);
            }
          }
        });

        // Center the model
        const box = new THREE.Box3().setFromObject(this.model);
        const center = box.getCenter(new THREE.Vector3());
        this.model.position.sub(center);
        
        // Scale model to fit view
        const size = box.getSize(new THREE.Vector3());
        const maxDim = Math.max(size.x, size.y, size.z);
        const scale = 3 / maxDim;
        this.model.scale.multiplyScalar(scale);

        this.scene.add(this.model);
      } catch (error) {
        console.error('Error loading model:', error);
        if (loadingElement) loadingElement.textContent = 'Error loading model';
      } finally {
        if (loadingElement) loadingElement.style.display = 'none';
      }
    }

    private updateMaterials(): void {
      this.materials.forEach(material => {
        if (material instanceof THREE.MeshStandardMaterial) {
          material.envMap = this.envMap;
          material.needsUpdate = true;
        }
      });
    }

    private setupEventListeners(): void {
      // Environment map selection
      const envSelect = document.getElementById('environment-select') as HTMLSelectElement;
      envSelect?.addEventListener('change', (e) => {
        const value = (e.target as HTMLSelectElement).value;
        this.loadEnvironmentMap(value);
      });

      // Environment intensity
      const envIntensity = document.getElementById('env-intensity') as HTMLInputElement;
      envIntensity?.addEventListener('input', (e) => {
        const value = parseFloat((e.target as HTMLInputElement).value);
        this.renderer.toneMappingExposure = value;
      });

      // Material controls
      const metalness = document.getElementById('metalness') as HTMLInputElement;
      const roughness = document.getElementById('roughness') as HTMLInputElement;
      const materialColor = document.getElementById('material-color') as HTMLInputElement;

      const updateMaterialProperty = (property: string, value: number | string) => {
        this.materials.forEach(material => {
          if (material instanceof THREE.MeshStandardMaterial) {
            if (property === 'color') {
              material.color.set(value as string);
            } else {
              (material as any)[property] = value;
            }
            material.needsUpdate = true;
          }
        });
      };

      metalness?.addEventListener('input', (e) => {
        const value = parseFloat((e.target as HTMLInputElement).value);
        updateMaterialProperty('metalness', value);
      });

      roughness?.addEventListener('input', (e) => {
        const value = parseFloat((e.target as HTMLInputElement).value);
        updateMaterialProperty('roughness', value);
      });

      materialColor?.addEventListener('input', (e) => {
        const value = (e.target as HTMLInputElement).value;
        updateMaterialProperty('color', value);
      });

      // Window resize
      window.addEventListener('resize', this.onWindowResize.bind(this));
    }

    private onWindowResize(): void {
      if (this.canvas) {
        const width = this.canvas.clientWidth;
        const height = this.canvas.clientHeight;

        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
      }
    }

    private animate(): void {
      requestAnimationFrame(this.animate.bind(this));
      this.controls.update();
      this.renderer.render(this.scene, this.camera);
    }
    
  }

  // Initialize the viewer when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ModelViewer();
  });
</script>